import { expect, browser, $ } from '@wdio/globals'

const _TIMEOUT = 20000;

describe(`Task 1`, () => {
    it(`Opens up google.com`, async () => {
        await browser.url(`https://www.google.com`)
        await expect($(`/descendant::img`)).toHaveAttribute(`alt`, `Google`)
    })
    it('Opens demowebshop, adds items to cart and calculates price to 1002600', async () => {
        await browser.url(`https://demowebshop.tricentis.com/`);
        await browser.maximizeWindow();

        let giftCardButton = $(`/descendant::a[contains(text(), 'Gift Cards')]`);
        await giftCardButton.click();

        let product = $(`/descendant::div[contains(@class, 'product-grid')]` +
                        `/descendant::div[contains(@class, 'prices')][number() > 99]` +
                        `/ancestor::div[contains(@class, 'item-box')]` +
                        `/descendant::a`);
        await product.click();

        let recipientName = $(`/descendant::input[contains(@class, 'recipient-name')]`);
        let yourName = $(`/descendant::input[contains(@class, 'sender-name')]`);
        await recipientName.setValue(`My friend`);
        await yourName.setValue(`My name`);
        
        let quantity = $(`/descendant::input[contains(@class, 'qty-input')]`);
        await quantity.clearValue();
        await quantity.setValue(`5000`);

        let addToCartButton = $(`/descendant::input[contains(@class, 'add-to-cart-button')]`);
        await addToCartButton.click();
        await $(`/descendant::div[contains(@class, 'ajax-loading-block-window')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true});

        let addToWishlistButton = $(`/descendant::input[contains(@class, 'add-to-wishlist-button')]`);
        await addToWishlistButton.click();
        await $(`/descendant::div[contains(@class, 'ajax-loading-block-window')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true});

        let barNotifExit = $(`/descendant::div[contains(@id, 'bar-notification')]/descendant::span[contains(@class, 'close')]`);
        await barNotifExit.click();

        let jewelry = $(`/descendant::div[contains(@class, 'block-category-navigation')]/descendant::a[contains(text(), 'Jewelry')]`);
        await jewelry.click();

        let createJewelery = $(`/descendant::div[contains(@class, 'product-grid')]/descendant::a[contains(text(), 'Create Your Own Jewelry')]`);
        await createJewelery.click();

        let material = $(`/descendant::select/descendant::option[contains(text(), 'Silver') and contains(text(), '1 mm')]`);
        let length = $(`/descendant::dt/label[contains(text(), 'Length in cm')]/ancestor::dt/following::dd/input[contains(@type, 'text')]`);
        let pendant = $(`/descendant::ul[contains(@class, 'option-list')]/descendant::label[contains(text(), 'Star')]`);
        await material.click();
        await length.setValue(`80`);
        await pendant.click();

        quantity = $(`/descendant::input[contains(@class, 'qty-input')]`);
        await quantity.clearValue();
        await quantity.setValue(`26`);

        addToCartButton = $(`/descendant::input[contains(@class, 'add-to-cart-button')]`);
        await addToCartButton.click();
        await $(`/descendant::div[contains(@class, 'ajax-loading-block-window')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true});

        addToWishlistButton = $(`/descendant::input[contains(@class, 'add-to-wishlist-button')]`);
        await addToWishlistButton.click();
        await $(`/descendant::div[contains(@class, 'ajax-loading-block-window')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true});

        let wishlist = $(`/descendant::span[contains(text(), 'Wishlist')]/parent::a`);
        await wishlist.click();

        let addToCarts = $$(`/descendant::input[contains(@type, 'checkbox') and contains(@name, 'addtocart')]`);
        await addToCarts.forEach(async element => {
            await element.click()
        });

        addToCartButton = $(`/descendant::input[contains(@type, 'submit') and contains(@value, 'Add to cart')]`);
        await addToCartButton.click();
        await $(`/descendant::div[contains(@class, 'ajax-loading-block-window')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true});

        let shoppingCart = $(`/descendant::span[contains(@class, 'cart-label')]/parent::a`);
        await shoppingCart.click();

        let subTotal = $(`/descendant::span[contains(@class, 'product-price')]`);
        
        await expect(parseFloat(await subTotal.getText())).toEqual(1002600);
    })
})


describe('Task 2', () => {
    it('Navigates to demoqa and interacts with the progress bar', async () => {
        // Code generated by the browser (semi-generated)
        await browser.maximizeWindow() // Custom added line
        await browser.url("https://demoqa.com/")
        await expect(browser).toHaveUrl("https://demoqa.com/")
        await browser.$("aria/Widgets").click()
        await browser.$("//span[contains(text(), 'Progress Bar')]").click() // Edited line
        await browser.$("//*[@id=\"startStopButton\"]").click()
        await $(`/descendant::div[contains(@role, 'progressbar')][text() = '100%']`).waitForExist({timeout: _TIMEOUT}) // Added line
        await browser.$("//*[@id=\"resetButton\"]").click()
        await $(`/descendant::div[contains(@role, 'progressbar')][text() = '0%']`).waitForExist({timeout: _TIMEOUT})  // Added line
    })
    it('Navigates to demoqa, adds a bunch of new entries and removes one when a new page is added', async () => {
        await browser.maximizeWindow();
        await browser.url(`https://demoqa.com/`);
        
        let elements = $(`/descendant::div[contains(@class, 'mt-4')]//*[contains(text(), 'Elements')]`);
        await elements.click();

        let webTables = $(`/descendant::ul[contains(@class, 'menu-list')]//*[contains(text(), 'Web Tables')]`);
        await webTables.click();

        await $(`/descendant::span[contains(@class, '-totalPages')]`).scrollIntoView();

        await browser.waitUntil(async () => {
            let totalPages = $(`/descendant::span[contains(@class, '-totalPages')]`);
            if(parseInt(await totalPages.getText()) > 1)
                return true;

            let add = $(`/descendant::button[contains(@id, 'addNewRecordButton')]`);
            await add.click();

            let firstName = $(`/descendant::input[contains(@id, 'firstName')]`);
            let lastName = $(`/descendant::input[contains(@id, 'lastName')]`);
            let email = $(`/descendant::input[contains(@id, 'userEmail')]`);
            let age = $(`/descendant::input[contains(@id, 'age')]`);
            let salary = $(`/descendant::input[contains(@id, 'salary')]`);
            let department = $(`/descendant::input[contains(@id, 'department')]`);

            await firstName.setValue(`Name`+Math.random());
            await lastName.setValue(`Last`+Math.random());
            await email.setValue(`emname`+Math.random()+`@email.com`);
            await age.setValue(Math.floor(Math.random()*15));
            await salary.setValue(Math.floor(Math.random()*1000));
            await department.setValue(`Deprtmnt`+Math.random());

            let send = $(`/descendant::button[contains(@id, 'submit')]`);
            await send.click();

            browser.waitUntil(async() => await $(`/descendant::div[contains(@role, 'dialog')]`).waitForDisplayed({timeout: _TIMEOUT, reverse: true}));

            totalPages = $(`/descendant::span[contains(@class, '-totalPages')]`);
            return parseInt(await totalPages.getText()) > 1;
        },
        {timeout: 60000});

        let next = $(`/descendant::button[contains(text(), 'Next')]`);
        await next.click();

        let deletes = $(`/descendant::span[contains(@id, 'delete-record')]`);
        await deletes.click();

        let pageJump = $(`/descendant::div[contains(@class, '-pageJump')]/input`);

        let totalPages = $(`/descendant::span[contains(@class, '-totalPages')]`);

        await expect(parseInt(await pageJump.getAttribute(`value`)) == 1).toBeTruthy();
        await expect(parseInt(await totalPages.getText()) == 1).toBeTruthy()
    })
})